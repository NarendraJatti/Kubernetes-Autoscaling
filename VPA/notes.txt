Lab Objective:
In this lab, you will install and configure the Vertical Pod Autoscaler (VPA) in your Kubernetes cluster. The lab will walk you through the installation of VPA using predefined manifests, cloning the VPA repository for advanced control, and deploying a sample application to see how VPA interacts with it. Additionally, you'll learn how to troubleshoot issues using VPA logs.

By the end of this lab, you should be able to:

Install VPA and its components (Recommender, Updater, Admission Controller) in a Kubernetes cluster
Understand the role of each VPA component and how they contribute to efficient resource management
Deploy a sample application to see how VPA recommends and adjusts resources for it
Troubleshoot resource-related issues in your application using logs generated by the VPA components, particularly the VPA Updater
This hands-on experience will give you the skills to manage pod resources dynamically in a production-grade Kubernetes environment, ensuring that applications run efficiently with the appropriate resource requests.






We have prepared the required YAML files for you to deploy the Vertical Pod Autoscaler (VPA). Simply follow the steps below to apply the necessary configurations:

Step 1: Install VPA Custom Resource Definitions (CRDs)
These CRDs allow Kubernetes to recognize the custom resources that VPA uses to function properly. To install them, run this command:

kubectl apply -f /root/vpa-crds.yml

Step 2: Install VPA Role-Based Access Control (RBAC)
RBAC ensures that VPA has the appropriate permissions to operate within your Kubernetes cluster. To install the RBAC settings, run:

kubectl apply -f /root/vpa-rbac.yml

By running these commands, the VPA will be successfully deployed to your cluster, ready to manage and adjust your pod resources dynamically.


Introduction to Kubernetes Vertical Pod Autoscaler (VPA)

Clone the VPA Repository and Set Up the Vertical Pod Autoscaler
You are required to clone the Kubernetes Autoscaler repository into the /root directory and set up the Vertical Pod Autoscaler (VPA) by running the provided script.

Steps:
Clone the repository:

First, navigate to the /root directory and clone the repository:

  git clone https://github.com/kubernetes/autoscaler.git

Navigate to the Vertical Pod Autoscaler directory:

After cloning, move into the vertical-pod-autoscaler directory:

   cd autoscaler/vertical-pod-autoscaler

Run the setup script:

Execute the provided script to deploy the Vertical Pod Autoscaler:

   ./hack/vpa-up.sh

By following these steps, the Vertical Pod Autoscaler will be installed and ready to manage pod resources in your Kubernetes cluster.

kubectl get deployments -n kube-system | grep vpa

Components of Vertical Pod Autoscaler (VPA)
The Vertical Pod Autoscaler (VPA) project consists of 3 key components that work together to monitor, recommend, and adjust resource requests for Kubernetes pods. These components include the following:

1. Recommender
Role: The Recommender continuously monitors the current and past resource consumption (CPU and memory) of containers.
Functionality:
Based on the observed usage, it provides recommended values for the containers' CPU and memory requests.
These recommendations are used by the other components to adjust the resource allocations for containers.
Purpose: Ensures that the resource requests of containers are always optimally set based on their actual usage, helping avoid both over-provisioning and under-provisioning of resources.
2. Updater
Role: The Updater is responsible for ensuring that running pods have the correct resource requests as per the Recommender's suggestions.
Functionality:
It checks which of the managed pods have outdated or incorrect resource settings.
If a pod's resources need to be updated, the Updater will evict (terminate) the pod so that it can be recreated by its controller (e.g., Deployment, ReplicaSet) with the updated resource requests.
Purpose: This ensures that the running pods always have the recommended resources by restarting pods with the updated requests if necessary.
3. Admission Plugin
Role: The Admission Plugin sets the correct resource requests on new pods, either when they are first created or when they are recreated due to the Updater's action.
Functionality:
It works during the pod creation process, checking if the pod is managed by VPA.
If the pod is managed by VPA, it modifies the pod's resource requests to reflect the recommended values provided by the Recommender.
Purpose: Ensures that newly created or recreated pods start with the optimal resource requests from the very beginning.
These three components (Recommender, Updater, and Admission Plugin) work together to provide dynamic resource allocation for Kubernetes pods, optimizing resource usage and improving cluster efficiency.


kubectl logs $(kubectl get pods -n kube-system --no-headers -o custom-columns=":metadata.name" | grep vpa-updater) -n kube-system